global:
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""
kubeVersion: ""
nameOverride: ""
fullnameOverride: ""
commonLabels: {}
commonAnnotations: {}
clusterDomain: cluster.local
extraDeploy: []
image:
  registry: docker.io
  repository: bitnami/thanos
  tag: 0.23.1-scratch-r4
  pullPolicy: IfNotPresent
  pullSecrets: []
objstoreConfig: ""
indexCacheConfig: ""
bucketCacheConfig: ""
existingObjstoreSecret: "thanos-config"
existingObjstoreSecretItems: []
serviceAccount:
  create: false
  name: "thanos"
  automountServiceAccountToken: true
  annotations: {}
query:
  enabled: true
  logLevel: info
  logFormat: logfmt
  replicaLabel: [prometheus]
  dnsDiscovery:
    enabled: true
    sidecarsService: "prometheus-kube-prometheus-prometheus-thanos"
    sidecarsNamespace: "monitoring"
  stores:
  - dnssrv+_grpc._tcp.prometheus-kube-prometheus-prometheus-thanos.monitoring.svc.cluster.local:10901
  sdConfig: ""
  existingSDConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
    client:
      serverName: ""
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  service:
    type: ClusterIP
    ports:
      http: 9090
      grpc: 10901
    nodePorts:
      http: ""
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    ingressClassName: ""
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
    grpc:
      enabled: false
      hostname: thanos-grpc.local
      ingressClassName: ""
      annotations: {}
      extraHosts: []
      extraTls: []
      secrets: []
      extraRules: []
      tls: false
      selfSigned: false
      apiVersion: ""
      path: /
      pathType: ImplementationSpecific
queryFrontend:
  enabled: true
  logLevel: info
  logFormat: logfmt
  config: ""
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  rbac:
    create: false
    rules: []
  pspEnabled: false
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos.local
    ingressClassName: ""
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
bucketweb:
  enabled: false
  logLevel: info
  logFormat: logfmt
  refresh: 30m
  timeout: 5m
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  service:
    type: ClusterIP
    ports:
      http: 8080
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos-bucketweb.local
    ingressClassName: ""
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
compactor:
  enabled: true
  logLevel: info
  logFormat: logfmt
  retentionResolutionRaw: 3d
  retentionResolution5m: 3d
  retentionResolution1h: 1y
  consistencyDelay: 3m
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  updateStrategy:
    type: Recreate
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  service:
    type: ClusterIP
    ports:
      http: 9090
    nodePorts:
      http: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
  automountServiceAccountToken: true
  serviceAccount:
    create: false
    name: "thanos"
    annotations: {}
    automountServiceAccountToken: true
  ingress:
    enabled: false
    hostname: thanos-compactor.local
    ingressClassName: ""
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    existingClaim: ""
storegateway:
  enabled: true
  logLevel: info
  logFormat: logfmt
  config: ""
  existingConfigmap: ""
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  topologySpreadConstraints: []
  schedulerName: ""
  service:
    type: ClusterIP
    ports:
      http: 9090
      grpc: 10901
    nodePorts:
      http: ""
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    existingClaim: ""
  automountServiceAccountToken: true
  serviceAccount:
    create: false
    name: "thanos"
    annotations: {}
    automountServiceAccountToken: true
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos-storegateway.local
    ingressClassName: ""
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
    grpc:
      enabled: false
      hostname: thanos-grpc.local
      ingressClassName: ""
      annotations: {}
      extraHosts: []
      extraTls: []
      secrets: []
      extraRules: []
      tls: false
      selfSigned: false
      apiVersion: ""
      path: /
      pathType: ImplementationSpecific
  sharded:
    enabled: false
    hashPartitioning:
      shards: ""
    timePartitioning:
      - min: ""
        max: ""
    service:
      clusterIPs: []
      loadBalancerIPs: []
      http:
        nodePorts: []
      grpc:
        nodePorts: []
ruler:
  enabled: false
  logLevel: info
  logFormat: logfmt
  replicaLabel: replica
  dnsDiscovery:
    enabled: true
  alertmanagers: []
  alertmanagersConfig: ""
  evalInterval: 1m
  clusterName: ""
  config: ""
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  service:
    type: ClusterIP
    ports:
      http: 9090
      grpc: 10901
    nodePorts:
      http: ""
      grpc: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    existingClaim: ""
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  ingress:
    enabled: false
    hostname: thanos-ruler.local
    ingressClassName: ""
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
receive:
  enabled: false
  mode: standalone
  logLevel: info
  logFormat: logfmt
  tsdbRetention: 15d
  replicationFactor: 1
  config: []
  existingConfigmap: ""
  replicaLabel: replica
  grpc:
    server:
      tls:
        enabled: false
        autoGenerated: false
        cert: ""
        key: ""
        ca: ""
        existingSecret: {}
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  service:
    type: ClusterIP
    ports:
      http: 10902
      grpc: 10901
      remote: 19291
    nodePorts:
      http: ""
      grpc: ""
      remote: ""
    clusterIP: ""
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: Cluster
    annotations: {}
    extraPorts: []
    labelSelectorsOverride: {}
    additionalHeadless: false
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
  persistence:
    enabled: true
    storageClass: ""
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
    existingClaim: ""
  ingress:
    enabled: false
    hostname: thanos-receive.local
    ingressClassName: ""
    annotations: {}
    extraHosts: []
    extraTls: []
    secrets: []
    extraRules: []
    tls: false
    selfSigned: false
    apiVersion: ""
    path: /
    pathType: ImplementationSpecific
receiveDistributor:
  enabled: false
  logLevel: info
  logFormat: logfmt
  replicaLabel: cluster
  replicationFactor: 1
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  command: []
  args: []
  replicaCount: 1
  updateStrategy:
    type: RollingUpdate
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
  resources:
    limits: {}
    requests: {}
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  readinessProbe:
    enabled: true
    initialDelaySeconds: 30
    timeoutSeconds: 30
    periodSeconds: 10
    successThreshold: 1
    failureThreshold: 6
  startupProbe:
    enabled: false
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 15
    successThreshold: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  initContainers: []
  sidecars: []
  extraVolumes: []
  extraVolumeMounts: []
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: {}
  podAnnotations: {}
  hostAliases: []
  lifecycleHooks: {}
  priorityClassName: ""
  schedulerName: ""
  topologySpreadConstraints: []
  automountServiceAccountToken: true
  serviceAccount:
    create: true
    name: ""
    annotations: {}
    automountServiceAccountToken: true
  autoscaling:
    enabled: false
    minReplicas: ""
    maxReplicas: ""
    targetCPU: ""
    targetMemory: ""
  pdb:
    create: false
    minAvailable: 1
    maxUnavailable: ""
metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    namespace: ""
    labels: {}
    jobLabel: ""
    interval: ""
    scrapeTimeout: ""
    metricRelabelings: []
    relabelings: []
    selector: {}
  prometheusRule:
    enabled: false
    namespace: ""
    additionalLabels: {}
    rules: []
volumePermissions:
  enabled: false
  image:
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 11-debian-11-r2
    pullPolicy: IfNotPresent
    pullSecrets: []
minio:
  enabled: false
  auth:
    rootUser: admin
    rootPassword: ""
  defaultBuckets: 'thanos'
networkPolicy:
  enabled: false
  allowExternal: true
  explicitNamespacesSelector: {}
